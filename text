requirement_description = request.POST.get('requirement-description')
        currency = request.POST.get('currency')
        price = request.POST.get('price')
        via_name = request.POST.get('via')
        via = Via.objects.get(Via_Name=via_name)

        requirement_type = request.POST.get('requirement-type')
        if requirement_type == 'Product':
            product_name = request.POST.get('product')
            brand_name = request.POST.get('brand')
            brand = Brand.objects.filter(Brand_Name=brand_name).first()
            service = None
        elif requirement_type == 'Service':
            service_name = request.POST.get('service')
            service = Service.objects.filter(Service_Name=service_name).first()
            product_name = None
            brand = None
        
        if via_name == 'Referral':
            referral_name = request.POST.get('referral_name')
            partner_name = None
        elif via_name == 'Partner':
            partner = request.POST.get('partner')
            partner_name = Partner.objects.filter(Partner_Name=partner).first()
            referral_name = None
        else:
            referral_name = None
            partner_name = None

        status_name = request.POST.get('status')
        status = Status.objects.get(Status_Name=status_name)

        contact_names = request.POST.getlist('contact_name[]')
        designations = request.POST.getlist('designation[]')
        emails = request.POST.getlist('email[]')
        phone_numbers = request.POST.getlist('number[]')

        if requirement_type == 'Product':
                company = Company(Company_Name=company_name, sector=sectors, address=address, city=city, state=state, country=country,
                                requirement=requirement_type, Product_Name=product_name, brand=brand, Requirement_Description=requirement_description,
                                currency=currency, price=price, via=via, status=status, Referral_Name=referral_name, Partner_Name=partner_name, Created_By=fullname)
        elif requirement_type == 'Service':
                company = Company(Company_Name=company_name, sector=sectors, address=address, city=city, state=state, country=country,
                                requirement=requirement_type, service=service, Product_Name=product_name, brand=brand, Requirement_Description=requirement_description,
                                currency=currency, price=price, via=via, status=status, Referral_Name=referral_name, Partner_Name=partner_name, Created_By=fullname)
            
        if via_name == 'Referral':
                company = Company(Company_Name=company_name, sector=sectors, address=address, city=city, state=state, country=country,
                                requirement=requirement_type, service=service, Product_Name=product_name, brand=brand, Requirement_Description=requirement_description,
                                currency=currency, price=price, via=via, status=status, Referral_Name=referral_name, Partner_Name=partner_name, Created_By=fullname)
        elif via_name == 'Partner':
                company = Company(Company_Name=company_name, sector=sectors, address=address, city=city, state=state, country=country,
                                requirement=requirement_type, service=service, Product_Name=product_name, brand=brand, Requirement_Description=requirement_description,
                                currency=currency, price=price, via=via, status=status, Partner_Name=partner_name, Referral_Name=referral_name, Created_By=fullname)
        else:
                company = Company(Company_Name=company_name, sector=sectors, address=address, city=city, state=state, country=country,
                                requirement=requirement_type, service=service, Product_Name=product_name, brand=brand, Requirement_Description=requirement_description,
                                currency=currency, price=price, via=via, status=status, Referral_Name=referral_name, Partner_Name=partner_name, Created_By=fullname)
                
        company.save()



# Models

class Company(models.Model):
    Company_Name = models.CharField(max_length=100)
    sector = models.ForeignKey(Sector, on_delete=models.SET_NULL, null=True)
    address = models.CharField(max_length=255)
    city = models.CharField(max_length=100)
    state = models.CharField(max_length=100, null=True)
    country = models.CharField(max_length=100)
    requirement = models.CharField(max_length=100, default=None)
    service = models.ForeignKey(Service, on_delete=models.SET_NULL, null=True)
    brand = models.ForeignKey(Brand, on_delete=models.SET_NULL, null=True)
    Product_Name = models.CharField(max_length=100, null=True)
    Requirement_Description = models.TextField()
    currency = models.CharField(max_length=100)
    price = models.CharField(max_length=100)
    via = models.ForeignKey(Via, on_delete=models.SET_NULL, null=True)
    Referral_Name = models.CharField(max_length=100, null=True)
    Partner_Name = models.ForeignKey(Partner, on_delete=models.SET_NULL, null=True)
    status = models.ForeignKey(Status, on_delete=models.SET_NULL, null=True)
    Created_By = models.CharField(max_length=100)

    def __str__(self):
        return self.Company_Name
    
    class Meta:
        verbose_name_plural = "companies"